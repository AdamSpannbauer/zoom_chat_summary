{"version":3,"sources":["zoomChatLogParser.js","CollapsibleSummaryTable.js","MessageSummaryTable.js","FileUpload.js","App.js","reportWebVitals.js","index.js"],"names":["SPLIT_ZOOM_LOG_REGEX","PARSE_ZOOM_CHAT_REGEX","parseLine","line","match","fullMatch","timeStamp","chatterName","msgText","parseText","text","lines","split","console","log","parsedLines","messagesByChatter","forEach","push","time","aggLines","Object","keys","map","i","history","messageCount","length","id","sort","a","b","localeCompare","row","filter","Boolean","useRowStyles","makeStyles","root","borderBottom","Row","props","React","useState","open","setOpen","classes","Fragment","TableRow","className","TableCell","IconButton","aria-label","size","onClick","component","scope","align","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","message","CollapsibleTable","rows","TableContainer","Paper","name","columns","field","headerName","flex","MessageSummaryTable","height","width","pageSize","checkboxSelection","FileUpload","handleUpload","event","file","target","files","reader","FileReader","onload","result","setState","state","parsedText","selectedTable","readAsText","handleRadioChange","value","render","form","FormControl","FormLabel","RadioGroup","onChange","FormControlLabel","control","Radio","label","fileUploaded","type","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4eea5d4.chunk.js","sourcesContent":["const SPLIT_ZOOM_LOG_REGEX = /(?=\\d{2}:\\d{2}:\\d{2} From .*? to .*? :)/\n\n// Example message: \"12:47:47 From Adam Spann to Everyone : Chat text\\n\"\n// The below regex would capture \"Adam Spann\" and \"Chat text\\n\"\nconst PARSE_ZOOM_CHAT_REGEX = /^(\\d{2}:\\d{2}:\\d{2}) From (.*?) to .*? : (.*)$/s\n\nconst parseLine = (line) => {\n  const match = line.match(PARSE_ZOOM_CHAT_REGEX)\n  if (match) {\n    const [fullMatch, timeStamp, chatterName, msgText] = match\n    return {fullMatch, timeStamp, chatterName, msgText}\n  } else {\n    return null\n  }  \n}\n\nconst aggLines = (parsedLines) => {\n  const messagesByChatter = {}\n\n  parsedLines.forEach((line) => {\n    const {timeStamp, chatterName, msgText} = line\n\n    if (!(chatterName in messagesByChatter)) {\n      messagesByChatter[chatterName] = []\n    }\n    \n    messagesByChatter[chatterName].push(\n      {time: timeStamp, text: msgText}\n    )\n  })\n\n  let aggLines = Object.keys(messagesByChatter).map((chatterName, i) => {\n    const history = messagesByChatter[chatterName]\n    return {chatterName, messageCount: history.length, history, id: i}\n  })\n\n  aggLines = aggLines.sort((a, b) => a.chatterName.localeCompare(b.chatterName))\n  aggLines.forEach((row, i) => row.id = i)\n  \n  return aggLines\n}\n\n\nexport const parseText = (text) => {\n  const lines = text.split(SPLIT_ZOOM_LOG_REGEX);\n  console.log(lines)\n  const parsedLines = lines.map(parseLine)\n  return aggLines(parsedLines.filter(Boolean)) \n}\n","// Source: https://material-ui.com/components/tables/\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n\nconst useRowStyles = makeStyles({\n  root: {\n    '& > *': {\n      borderBottom: 'unset',\n    },\n  },\n});\n\nfunction Row(props) {\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.chatterName}\n        </TableCell>\n        <TableCell align=\"right\">{row.messageCount}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Chat Logs\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Timestamp</TableCell>\n                    <TableCell>Text</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.history.map((message) => (\n                    <TableRow key={message.time}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {message.time}\n                      </TableCell>\n                      <TableCell>{message.text}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nRow.propTypes = {\n  row: PropTypes.shape({\n    chatterName: PropTypes.string.isRequired,\n    messageCount: PropTypes.number.isRequired,\n    history: PropTypes.arrayOf(\n      PropTypes.shape({\n        time: PropTypes.string.isRequired,\n        text: PropTypes.string.isRequired,\n      }),\n    ).isRequired,\n  }).isRequired,\n};\n\nexport function CollapsibleTable(props) {\n  const {rows} = props\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"collapsible table\">\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            <TableCell>Chatter Name</TableCell>\n            <TableCell align=\"right\">Message Count</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <Row key={row.name} row={row} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst columns = [\n  { field: 'id', headerName: '#', flex: 0.1 },\n  { field: 'chatterName', headerName: 'Name', flex: 0.3 },\n  { field: 'messageCount', headerName: 'Message Count', flex: 0.3 },\n];\n\n\nexport function MessageSummaryTable(props) {\n  const {rows} = props\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} pageSize={20} checkboxSelection />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { parseText } from './zoomChatLogParser';\n\nimport { CollapsibleTable } from './CollapsibleSummaryTable';\nimport { MessageSummaryTable } from './MessageSummaryTable';\n\n// TODO: select table https://material-ui.com/components/radio-buttons/\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\nexport class FileUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {parsedText: [], selectedTable: 'summary'}\n  }\n\n  get fileUploaded() {\n    return this.state.parsedText.length > 0;\n  }\n\n  handleUpload = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const text = event.target.result\n      this.setState((state, props) => {\n        return {parsedText: parseText(text), selectedTable: this.state.selectedTable}\n      })\n    }\n\n    reader.readAsText(file)\n  }\n\n  handleRadioChange = (event) => {\n    this.setState((state, props) => {\n      return {parsedText: this.state.parsedText, selectedTable: event.target.value}\n    })\n  }\n\n  render = () => {\n    const form = (\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select View</FormLabel>\n        <RadioGroup aria-label=\"Select View\" name=\"tableSelect\" value={this.state.selectedTable} onChange={this.handleRadioChange}>\n          <FormControlLabel value=\"summary\" control={<Radio />} label=\"Summary\" />\n          <FormControlLabel value=\"userLogs\" control={<Radio />} label=\"User Logs\" />\n        </RadioGroup>\n      </FormControl>\n    )\n\n    if (this.fileUploaded && this.state.selectedTable==='summary') {\n      return (\n        <div id='fileUpload'>\n          <input type='file' onChange={this.handleUpload} />\n          <hr />\n          {form}\n          <hr />\n          <MessageSummaryTable rows={this.state.parsedText} />\n        </div>\n      )\n    } else if (this.fileUploaded && this.state.selectedTable==='userLogs') {\n      return (\n        <div id='fileUpload'>\n          <input type='file' onChange={this.handleUpload} />\n          <hr />\n          {form}\n          <hr />\n          <CollapsibleTable rows={this.state.parsedText} />\n        </div>\n      )\n    } else {\n      return (\n        <div id='fileUpload'>\n          <input type='file' onChange={this.handleUpload} />\n        </div>\n      )\n    }\n  }\n}\n","import './App.css';\nimport { FileUpload } from './FileUpload';\n\n\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <FileUpload />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}